import Foundation

// Methods



// Instance Methods - belong to a class, struct, enum



class Counter{

    var count = 0

    

    func increment(){

        count += 1

    }

    

    func increment(by amount: Int){

        count += amount

    }

    

    func reset(){

        count = 0

    }

}



let counter = Counter()

print(counter.count)



counter.increment()

print(counter.count)



counter.increment(by: 2)

print(counter.count)



counter.reset()

print(counter.count)



// Self Property

// self - when param name for an instance is same as property name



struct Point{

    var x = 0.0, y = 0.0

    

    func isToTheRightOf(x: Double) -> Bool{

        return self.x > x

    }

}



let somePoint = Point(x: 4.0, y: 5.0)

if somePoint.isToTheRightOf(x: 1.0){

    print("Point is to the right of line where x === 1.0 ")

}





// Modifying Value types from within Instance Methods



// structs and enums are value types, whose props can't be modified internally

// mutating keyword



struct Point2{

    var x = 0.0, y = 0.0

    mutating func moveBy(x deltaX: Double, y deltaY: Double){

        x += deltaX

        y += deltaY

    }

}



//make sure to always init by var when using mutating funcs as let is non mutating



var somePoint2 = Point2(x: 1.0, y: 1.0)

somePoint2.moveBy(x: 2.0, y: 3.0)

print(somePoint2.x, somePoint2.y)







// assigning to self within a Mutating Method



struct Point3 {

    var x = 0.0, y = 0.0

    mutating func moveBy(x deltaX: Double, y deltaY: Double){

        self = Point3(x: x+deltaX, y: y+deltaY)

    }

}



var somePoint3 = Point3(x: 1.0, y: 1.0)

somePoint3.moveBy(x: 2.0, y: 3.0)

print(somePoint3.x, somePoint3.y)





// mutating methods for enums can set the implicit self params to be a diff case from the same enums



enum TriStateSwitch{

    case off, low, high

    mutating func next(){

        switch self{

        case .off:

            self = .low

        

        case .low:

            self = .high

        

        case .high:

            self = .off

        }

    }

}



var ovenLight = TriStateSwitch.low

ovenLight.next()

ovenLight.next()



// Type Methods

// here you don't need to create an instance of a main class





class Math{

    static func square (of number: Int) -> Int{

        return number * number

    }

}





let sqOfFive = Math.square(of: 5)

print(sqOfFive)
