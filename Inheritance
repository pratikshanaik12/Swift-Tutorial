// Inheritance



// Creating a base class



class Vehicle {

    var currentSpeed = 0.0

    var description : String {

        return "\(currentSpeed)"

    }

    

    func makeNoise(){

        

//        default behaviour for a generic vehicle

        "random vehicle noise"

    }

}



// Creating an instance of a base class



let someVehicle = Vehicle()

someVehicle.description





// Subclassing - creating a new class based on an existing class



class Bicycle: Vehicle{

    var hasBasket = false

}



let bicycle = Bicycle()

bicycle.hasBasket = true

bicycle.currentSpeed = 10.0

bicycle.description



// Subclassing the subclass



class Tandem : Bicycle{

    var currentPassengers = 0

}



var tandem = Tandem()

tandem.hasBasket = true

tandem.currentSpeed = 22.0

tandem.currentPassengers = 2

tandem.description





// Overriding Method:  the makeNoise method



class Train: Vehicle{

    override func makeNoise(){

        "Choo Choo"

    }

}



var train = Train()

train.makeNoise()





// Overriding Properties: description property



class Car: Vehicle{

    var gear = 1

    override var description: String{

        "\(gear)"

    }

}



var car = Car()

car.currentSpeed = 25.0

car.gear = 3

car.description





// Overring property observer



class AutoCar : Car {

    override var currentSpeed: Double{

        didSet{

            gear = Int(currentSpeed / 10.0) + 1

        }

    }

}

let autoCar = AutoCar()

autoCar.currentSpeed = 35.0

autoCar.description





// Preventing override - use final keyword

// if you subclass or override this class then it will result in compile time error





class unmodifiableCar : Car {

    final override var description: String {

        return super.description

    }

}



var unCar = unmodifiableCar()

// prints the gear value from car class

unCar.description
