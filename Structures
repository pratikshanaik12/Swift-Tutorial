// STRUCTURES
// are value types
// way of grouping data
// have implicit constructors
// cannot sub class other classes


struct Person{
  let name: String
  let age: Int
  
}

let foo = Person(name: "Foo", age: 20)
print(foo.name)
print(foo.age)

struct CommodoreComputer{
  let name: String
  let manufacturer: String

  // can do this instead of init ->
  // let manufacturer = "Commodore"

  init(name: String) {
    self.name = name
    self.manufacturer = "Commodore"
    
  }
}
// let c64 = CommodoreComputer(name: "My commodore", manufacturer: "Commodore")

// let c128 = CommodoreComputer(name: "My commodore 123", manufacturer: "Commodore")

let c64 =   CommodoreComputer(name: "My commodore")
print("\(c64.name) and \(c64.manufacturer)")


// Computed Properties

struct Person2{
  let firstName: String
  let lastName: String
  var fullName: String{
    "\(firstName) \(lastName)"
  } 
}

let fooBar = Person2(firstName: "Foo", lastName: "Bar")
print(fooBar.fullName)


// Structures are immutable internally


// Mutable Structures

struct Car{
  var currSpeed: Int
 mutating func drive(speed: Int) {
    print("Driving")
    currSpeed = speed
  }
}

let immutableCar = Car(currSpeed: 10)
// print(immutableCar.drive(speed:20))

var mutableCar = Car(currSpeed: 10)
// mutableCar.drive(speed:20)
// print(mutableCar.currSpeed)
let copy = mutableCar
mutableCar.drive(speed: 30)

print(mutableCar.currSpeed)
print(copy.currSpeed)




// custom copying
struct Bike{
  let manufacturer: String
  let currSpeed: Int
  func copy(currSpeed: Int) -> Bike{
    Bike(
         manufacturer: self.manufacturer,
      currSpeed: currSpeed)
  }
}

let bike1 = Bike(manufacturer: "HD", currSpeed: 20)
print(bike1)
let bike2 = bike1.copy(currSpeed: 30)
print(bike2)





// no subclassing - can't inherit from eachother

// struct livingThing{
//   init(){
//     print("I am a living thing")
//   }
// }

// struct Animal: livingThing{}


